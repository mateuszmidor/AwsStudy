@startmindmap 00-diagram

title Security Token Service

<style>
mindmapDiagram {
  .error {
    BackgroundColor Salmon
  }
  .orange {
    BackgroundColor orange
  }
  .express {
    BackgroundColor LightSkyBlue
  }
  .appsync {
    BackgroundColor LightGreen
  }
}s
</style>


*[#Orange] <b>Security Token Service
 * Overview\n*allows to grant temporary access to AWS resources (max 1hour)\n*AssumeRole: assume roles in your account or cross-account\n*AssumeRoleWithSAML - return credentials for user logged with SAML\n**SAML = Security Assertion Markup Language\n*AssumeRoleWithWebIdentity - deprecated; use Cognito Identity Pools\n*GetSessionToken - for MFA (Multi Factor Authentication)\n*GetCallerIdentity - tell me who I am\n*DecodeAuthorizationMessage - decode error when AWS API is denied
 * Assuming a Role\n*Create IAM role\n*define which principals can access this IAM role\n*use AWS STS to assume role\n*temporary credentials are valid 15-60 minutes
 * STS with MFA\n*use GetSessionToken from STS API\n*need appropriate IAM policy using IAM conditions:\n  aws:MultiFactorAuthPresent:true
 * IAM authorization evaluation\n*go through all DENY policies, if match - then finish with DENY\n*go through all ALLOW policies, if match - then finish with ALLOW\n*nothing matched - finish with DENY
 * IAM policies & S3 Bucket policies\n*IAM policies are attached to users, roles, groups\n*S3 policies are attached t obuckets\n*when evaluating if IAM policy can do X operation on a bucket,\nthe policies from both IAM and S3 are first added together and the evaluated,\nit means ALLOWS are added together and DENIES are added together
 * Dynamic Policies\n*useful eg. for granting permissions to users in S3 bucket eg under /home/<user>\n**so there is no need to create IAM policy per-user\n*uses special policy variable: ${aws:username}
 * AWS Managed Policies\n*managed and updated by AWS when introducing new services,\n so the users automatically gain access to the new services\n*good for power users and administrators
 * Customer Managed Policies\n*created and managed by you\n*reusable - can be applied to many principals\n*version-controlled
 * Inline Policies\n*one-to-one relationship between policy and principal\n*if principal is deleted - inline policy is deleted\n*inline policy JSON definition is limited to 2KB!!!
 * PassRole/AssumeRole - TrustPolicy\n*one AWS service needs an IAM role to call another AWS service\n*for this, user needs to **pass role** to the first service\n**pass role = assign role, eg. s3-list-objects\n*to pass a role, user needs to have **iam:PassRole** permission\n*the passed role must allow passing it to given service. It needs to agree :)
 * Directory Service - for MS Active Directory \n*AWS Managed Microsoft AD\n**allows trust relationship towards on-premises AD service\n**allows Multi Factor Authentication\n*AD Connect\n**proxy for AD requests to actual AD service\n*SimpleAD\n**AWS service with AD interface; no real AD involved
@endmindmap
