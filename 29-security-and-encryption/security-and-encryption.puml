@startmindmap 00-diagram

title Security & Encryption - KMS, Encryption SDK, SSM Parameter Store, IAM&STS

<style>
mindmapDiagram {
  .s3 {
    BackgroundColor LightCyan
  }
  .orange {
    BackgroundColor orange
  }
  .kms {
    BackgroundColor LightSkyBlue
  }
  .envelope {
    BackgroundColor LightGreen
  }
  .manager {
    BackgroundColor LightPink
  }
}s
</style>


*[#Orange] <b>Security & Encryption
 * <b>Encryption\n*in-flight\n**data is enrypted on client side and decrypted server side\n**SSL helps to achieve that\n**like HTTPS\n**protects against Man In The Middle attack\n*at-rest\n**data is encrypted on server side when it is received\n**data is decrypted before sending to client\n**encryption is using keys, usually managed by KMS\n*client side encryption\n**data is encrypted by client and sent to server\n**server is unable to decrypt the data\n**it will be decrypted by another requesting client\n**can use Envelope Encryption (required for files >4KB)
 * <b>KMS - Key Managenent Service\n*encryption/decryption\n*easy way to control who can access your data in AWS\n*integrated with IAM for authorization - who can use given key\n*integrated with\n**EBS\n**S3\n**RDS\n**Redshift - data warehouse\n**SSM - Systems Manager, Parameter Store\n**SNS\n**SQS\n**etc.\n*works with CLI and SDK\n*KMS can fully manage the keys and policies:\n**create, enable, disable keys - Customer Managed Keys\n**rotate keys - AWS and Customer Managed keys\n*can audit keys usage with CloudTrail\n*KMS keys are bound to AWS regions\n**you can create multi-region Customer Manged Keys\n*how to move encrypted EBS to another region?\n**copy EBS snapshot to new region, but specify NEW key for it in target region <<kms>>
  * <b>Key Policies\n*similar to S3 bucket policies, IAM policies etc\n*without policy no one can access the key\n*default policy - full access to the key for AWS account root <<kms>>
  * <b>Customer Master Key (CMK) types:\n*now they are named just AWS KMS keys - probably political correctness\n*they are the primary resource in KMS\n*Symmmetric AES-256\n**first offered encryption in AWS\n**necessary for Envelope Encryption\n**you never see the actual key\n**use KMS to use the key\n*Asymmetric Key (RSA & ECC key pairs)\n**public key (encyption) + private key (decryption)\n**used for encrypt/decrypt or sign/verify operations\n**public key is downloadable\n**you never see the private key\n**use case: encryption outside AWS (without KMS access)\n*KMS Keys types:\n**AWS Managed - free, created by the first AWS service that needs it\n**Customer Managed - 1$/month; key material may be imported\n*KMS API calls are paid: 3 cents / 10'000 calls\n*KMS can encrypt max 4KB data/call, for more - use Envelope Encyption <<kms>>
  * <b>Request Quotas\n*numbers:\n**symmetric: 5-30k/sec depending on region\n**asymmetric: 300/sec (ECC) or 500/sec (RSA)\n*all cryptographic operations share the same quota:\n**Encrypt, Decrypt\n**GenerateDataKey, GenerateDataKeyWithoutPlaintext\n**GenerateRandom\n**ReEncrypt\n**Sign, Verify - assymetric algorithms, HMAC:\n        Hash-based Message Authentication Codes\n*exceeding the quota causes ThrottlingException:\n**use exponential backoff to mitigate\n**use Data Encryption Key caching - included in Encryption SDK\n**can request quota increase through API or AWS support <<kms>>
 * <b>Exam - KMS symmetric API:\n*Encrypt - encrypt data server-side up to 4KB\n*Decrypt - decrypt server-side up to 4KB\n*GenerateDataKey - DEK for client-side encryption\n**this returns plaintext key + encrypted key\n*GenerateDataKeyWithoutPlaintext\n**returns only the encrypted key\n**must use KMS Decrypt later to decrypt the key\n*GenerateRandom - returns random byte string
 * <b>CLI\n*aws-encryption-cli --encrypt ...\n*aws-encryption-cli --decrypt  ...
 * <b>Envelope Encryption\n*required for encrypting data > 4KB\n*data encryption and decryption happens on client side\n*implemented in AWS Encryption SDK <<envelope>>
  * <b>Encryption:\n*use GenerateDataKey API to get Data Encryption Key (DEK)\n**we also get encrypted version of the key, so 2 keys in total\n*then encrypt the data on client side using the received key\n*then pack the encrypted data together with encrypted key\n**this is the so-called envelope <<envelope>>
  * <b>Decryption:\n*decrypt the encrypted DEK key using KMS Decrypt API\n*decrypt the data on client side using the DEK <<envelope>>
  * <b>Data Encyption Key caching\n*the key can be cached and reused\n*this limits number of KMS API calls -> lower cost\n*but is less secure <<envelope>>
 * <b>S3 encryption\n*SSE=Server Side Encryption\n*SSE-S3 - keys are managed by AWS, AES256\n*SSE-KMS - keys managed by KMS, aws:kms\n*SSE-C - keys managed by client, provided in headers\n*Client Side Encryption - encryption happens on client side <<s3>>
  * <b>SSE-KMS\n*KMS advantages: user control + audit trail\n*encryption on server side\n*must set header: "x-amz-server-side-encryption":"aws:kms"\n*uses GenerateDataKey & Decrypt KMS API - works with large objects\n*KMS API calls show up in CloudTrail (api usage logging)\n*S3 calls towards KMS are included in KMS quota!\n*it's possible to force SSL connections for S3\n**do this by setting aws:SecureTransport option<<s3>>
 * <b>S3 bucket key for SSE-KMS\n*to reduce KMS API calls and cost by 99%\n*S3 bucket key is generated once using GenerateDataKey,\n   and then reused to encrypt objects in given bucket
 * <b>SSM Parameter Store\n*to securily store parameters and configuration\n*optional encryption with KMS\n*allows building a hierarchy, like folder structure\n**eg separate parameter set per department, per application\n**/poland/gdansk/office_address\n*Parameter Store flavours:\n**standard - max 10k params, free\n**advanced - max 100k params, paid
 * <b>Secrets Manager\n*compared to Parameter store - newer, more secret oriented\n*can force secrets rotation every X days\n**rotation is linked with Lambad function\n*can automatically generate secrets on rotation\n*secrets are encrypted with Key Management Service\n*automatic rotation for RDS, DocumentDB, RedShift <<manager>>
  * <b>SSM Parameter Store vs Secrets Manager\n*Secrets Manager\n**more expensive\n**allows automatic secrets rotation using lambda\n**lambdas provided for RDS, Redshift, DocumentDB\n**KMS encryption of secrets is mandatory\n**integratio with CloudFormation\n*ParameterStore\n**cheaper\n**simple API\n**no secrets rotation\n**KMS encryption is optional\n**integration with CloudFormation <<manager>>
 * <b>CloudWatch logs encryption\n*logs can be encrypted using KMS\n*encryption is enabled on LogGroup level (not on more detailed log streams level)\n*encryption is enabled using API, not the console\n*API:\n**associate-kms-key - for existing log groups\n**create-log-group - if the log group doesn't exist yet 
 * <b>CodeBuild security\n*it works outside your VPC, but can be configured to be inside\n*don't store secrets in plain text!\n*instead, env variables can reference parameters in:\n**Parameter Store\n**Secrets Manager
@endmindmap
