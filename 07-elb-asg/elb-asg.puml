@startmindmap mindmap

title Elastic Load Balancer and Auto Scaling Groups

<style>
mindmapDiagram {
    .alb {
        BackgroundColor  LightSkyBlue
  }
    .nlb {
        BackgroundColor  LightGreen
  }
  }
    .gwlb {
        BackgroundColor  Violet
  }
    .asg {
        BackgroundColor  Pink
  }
}
}
</style>


*[#Orange] <b>ELB + ASG
 * <b>Scalability, HighAvailability\n*Scalability - ability to take more load by adaptation\n**vertical - use bigger instance\n**horizontal - use more similar instances\n*High Availability - ability to survive disaster\n**by means of redundancy\n**employ multiple Availbility Zones
 * <b>Why use LoadBalancer\n*to hide multiple instances behind single URL\n*to hide instance failures (health check + switch over)\n*to provide SSL termination\n*to enforce session stickiness with cookies\n*to handle high availability across zones\n*to separate public and private traffic
 * <b>Health Checks\n*used to discover unhealthy instances\n*hit specified port on specified route using HTTP\n**eg. /health:8888
 * <b>Load Balancer types:\n*Classic Load Balancer (CLB)- limited features, don't use\n**HTTP, HTTPS, TCP, SSL\n*Applicatino Load Balancer (ALB) - supersedes CLB\n**HTTP, HTTPS, WebSockets\n*Network Load Balancer (NLB)\n**TCP, UDP, TLS\n**gets static IP per AZ\n*Gateway Load Balancer (GWLB) - operates at Level3 (IP)  
 * <b>Load Balancer Security Groups\n*you can set Load Balancer Security Group as a Source\n   for your application Security Group\n*useful for auto scaling groups -\n   just allow traffic from this load balancer's SG
 * <b>Application Load Balancer\n*allows routing to multiple machines (target groups)\n*allows routing to multiple applications (containers)\n*supports HTTP/2 and WebSockets\n*supports redirecting eg. HTTP -> HTTPS\n*good fit for microservices and containers\n**Docker\n**Amazon ECS-dynamic port mapping feature\n*multiple applications can be served with just 1 LoadBalancer\n**Classic Load Balancer can only server 1 application - cost++\n*original client's IP is stored in X-Forwarded-For http header <<alb>>
  * <b>Routing to different Target Groups:\n*based on path in URL (eg. example.com/<b>users</b>)\n*based on hostname (eg. <b>blog</b>.example.com)\n*based on query strings & headers <<alb>>
  * <b>Target Groups:\n*EC2 instances, also from Auto Scaling Group\n*ECS Tasks\n*Lambda Functions\n*private IP addresses <<alb>>
 * <b>Network Load Balancer\n*Layer4 - TCP, UDP\n*can handle millions of requests per second\n*latency ~100ms (ALB ~400ms)\n*one static IP per Availability Zone\n*good fit for in need of extreme performance, TCP&UDP traffic <<nlb>>
  * <b>Target Groups:\n*EC2 instances\n*IP addresses - must be private IPs\n*another Network Load Balancer\n**Load Balancer chaining <<nlb>>
 * <b>Gateway Load balancer\n*run all your AWS traffic through your non-AWS network tool\n**Firewall, Payload Manipulation, Deep Packet Inspection etc.\n*operates at Layer3 (Network Layer) - IP packets\n*known as GENEVE protocol on port 6081  <<gwlb>>
  * <b>Target Groups:\n*EC2 instances\n*IP addreses - must be private IPs<<gwlb>>
 * <b>Sticky Sessions (Session Affinity)\n*always redirect same client to the same backend instance\n*available in Classic and Application Load Balancers\n*implemented using http cookie:\n**Application-based cookie - generated by LB or your application\n**Duration-based cookie - generated by LoadBalancer, expires
 * <b>Cross-Zone Load Balancing\n*distribute traffic evenly between instances in Availability Zones,\n   even if each zone runs different number of instances\n*for Application Load Balancer it is always enabled\n**no charges for inter-AZ data transfers\n*for Nework Load Balancer it is disabled by default\n**charges apply for inter-AZ data transfers\n*for Classic Load Balancer it is disabled by default\n**no charges for inter-AZ data transfers
 * <b>SSL/TLS\n*allows for in-flight encryption\n*SSL - Secure Socket Layer\n*TLS - Transport Layer Security\n*certificates are issued by Certificate Authority (CA)\n**Comodo, Godaddy, LetsEncrypt,...\n*certificates are managed by AWS Certificate Manager (ACM)
 * <b>Load Balancer Connection Draining:\n*CLB - Connection Draining\n*ALB, NLB - Deregistration Delay\n*time to complete ongoing requests
 * <b>Auto Scaling Group\n*create new EC2 instances and register in specified Load Balancer\n*main parameters: current, desired and maximum capacity\n*launch template/configuration:\n**AMI + instance type\n**EC2 user data (script)\n**EBS volumes\n**Security Groups\n**SSH Key Pair\n*network+subnets+LoadBalancer information\n*min/max/initial capacity\n*scaling policy\n*scaling in and out is possible based on CloudWatch Alarms\n**or now on direct metric like EC2 CPU/Network/Custom <<asg>>
  * <b>Dynamic Scaling Policies\n*Target Tracking Scaling\n**simplest one\n**eg.: keep CPU usage around 70%\n*Simple/Step Scaling\n**eg. on CloudWatch Alarm, add/rm 2 VMs\n*Scheduled Actions\n**scaling based on calendar\n*Predictive Scaling\n**analyze historical load and scale accordingly <<asg>>
  * <b>Scaling Cooldown\n*after scaling, the cooldown period begins\n*it is 300sec by default\n*during cooldown, no further scaling will happen\n*this is for the setup to stabilize <<asg>>
@endmindmap