@startmindmap mindmap

title CloudWatch, X-Ray, CloudTrail

<style>
mindmapDiagram {
  .trail {
    BackgroundColor Pink
  }
  .orange {
    BackgroundColor orange
  }
  .xray {
    BackgroundColor LightSkyBlue
  }
  .watch {
    BackgroundColor LightGreen
  }
}
</style>


*[#Orange] <b>Monitoring&Audit
 * <b>CloudWatch\n*collect and track metrics\n*collect, analyze and store logs\n*send notifications(events)\n when something happens\n*raise alarms based on metrics/events <<watch>>
  * <b>Metrics\n*metric is a variable to monitor\n*metric belongs to a namespace\n*dimension is attribute of a metric, eg.\n**instance ID\n**environment\n*up to 10 dimensions per metric <<watch>>
   * <b>Standard metrics (out of the box)\n*like: CPU utilization, NetworkIN\n*regular metrics - every 5 minutes\n*detailed metrics - every 1 minute, paid <<watch>>
   * <b>Custom metrics\n*you can push own metrics from the instance\n*use PutMetricData API call for this\n*can add dimensions (attributes)\n*Standard Resolution - can push evey 60 seconds\n*High Frequency - push every 1/5/10/30 seconds\n*accepts data points 2 weeks in past\n*accepts data points 2 hours in the future\n*make sure EC2 instance time is correct <<watch>>
  * <b>Logs\n*can be sent to S3 or Kinesis Data Streams\n*can have expiration policy eg 30 days\n*can be filtered, eg ERROR and turned into metrics\n*metrics can be turned into alarms\n*use Logs Insights to query logs\n*use Log Subscription to send logs in near realtime\nto Amazon S3, Kinesis or ElasticSearch\n*can be aggregated from multiple Regions/Accounts\n*to push logs from EC2, you must run CloudWatch Agent\nor Unified Agent (preferred), and EC2 must have proper IAM permissions\n*Unified Agent adds CPU, Disk, RAM, Network, Processes and Swap\nmetrics along with logs, it is new and preferred <<watch>>
  * <b>Alarms - targets <<watch>>
   * <b>EC2 Instance\n*Stop, Terminate, Reboot, Recover EC2\n*Instance Status = VM status\n*System Status = HW status <<watch>>
   * <b>Auto Scaling Action <<watch>>
   * <b>send notifiaction to SNS <<watch>>
  * <b>Events\n*intercept events from AWS services, eg:\n**EC2 start, CodeBuild failure, S3 Put Object\n**can intercept API  call with CloudTrail integration\n*created based on EventPattern-match some AWS Service Event\n*or scheduled with eg. CRON\n*source event is stored as JSON and passed to event target for handling, eg\n**Lambda, Batch, ECS task <<watch>>
  * <b>Event Bridge - will replace CloudWatch Events\n*builds upon and extends CloudWatch Events\n*can have multiple rules\n*a rule filers events and eg. sends over to SNS <<watch>>
 * <b>X-Ray\n*troubleshoot performance and errors\n*distributed tracing for microservices\n*to enable it:\n**use AWS X-Ray SDK in your code\n**install X-Ray daemon on the system\n**ensure X-Ray write IAM permissions\n*Segment - information describing\nrequest traveling between 2 apps\n*Sub-segment - to add details\n**eg. specific calls made from that microservice\n*Trace - segments collected together\nto represent end-to-end communication\n**GetTraceSummaries - list IDs of traces\n**BatchGetTracesÂ - get traces data by ID\n*Sampling - limit number of requests\ntowards X-Ray service to reduce cost\n*Annotations - indexed KeyValue data\nfor searching and filtering\n*MetaData - non-indexed any type data,\nnot for searching\nbut supports arrays and objects <<xray>>
  * <b>Sampling\n*paid based on how many requests are sent to X-Ray service\n*reservoir - minimum no. of samples to record each second\n*rate  percentage 0.0-1.0 -  how many of all requests to record,\nset to 1.0 to record all (good for debug, expensive for production)\n*changing the values takes effect immediately without restarting <<xray>>
  * <b>X-Ray integration options:\n*EC2\n**daemon - single instance per EC2\n**sidecar - like in kubernetes\n*Fargate\n**sidecar only\n**in task definition must map port UDP 2000 in x-ray container\nand link application container with x-ray container with env var:\n AWS_XRAY_DAEMON_ADDRESS=xray-daemon:2000 <<xray>>
 * <b>CloudTrail\n*internal monitoring of API calls being made\n*audit changes made to resources by your users\n**who deleted my EC2?!\n*enabled by default\n*records last 90 days by default <<trail>>
  * <b>CloudTrail Events:\n*Management Events\n**eg. attach policy, config security, setup logging etc\n**enabled by default\n*Data Events\n**eg. S3 Get, Put, Delete Object\n**disabled by default - high data volume\n*Insight Events\n**detect unusual activity\n**analyzes management activity to create baseline\n**then continuously analyzes write events to detect unusual patterns\n*events are stored for 90 days, can be sent to S3\n*from "Event history" page you can "Create Athena Table"\n**turn CloudTrail logs into SQL source <<trail>>
@endmindmap
